!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/tpouget/Desktop/config_parser/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
./.objs/exe/linux/x86_64/release/ConfigParser.cpp.o	makefile	/^.\/.objs\/exe\/linux\/x86_64\/release\/ConfigParser.cpp.o: ConfigParser.cpp$/;"	t
./.objs/exe/linux/x86_64/release/VirtServ.cpp.o	makefile	/^.\/.objs\/exe\/linux\/x86_64\/release\/VirtServ.cpp.o: VirtServ.cpp$/;"	t
./.objs/exe/linux/x86_64/release/main.cpp.o	makefile	/^.\/.objs\/exe\/linux\/x86_64\/release\/main.cpp.o: main.cpp$/;"	t
./linux/x86_64/release/exe	makefile	/^.\/linux\/x86_64\/release\/exe: .\/.objs\/exe\/linux\/x86_64\/release\/ConfigParser.cpp.o .\/.ob/;"	t
0	compile_commands.json	/^   "\/usr\/bin\/gcc",$/;"	s	array:0.arguments
0	compile_commands.json	/^   "\/usr\/bin\/gcc",$/;"	s	array:1.arguments
0	compile_commands.json	/^   "\/usr\/bin\/gcc",$/;"	s	array:2.arguments
0	compile_commands.json	/^ {$/;"	o
1	compile_commands.json	/^   "-c",$/;"	s	array:0.arguments
1	compile_commands.json	/^   "-c",$/;"	s	array:1.arguments
1	compile_commands.json	/^   "-c",$/;"	s	array:2.arguments
1	compile_commands.json	/^ {$/;"	o
10	compile_commands.json	/^   ".\/.build.log"$/;"	s	array:0.arguments
10	compile_commands.json	/^   ".\/.build.log"$/;"	s	array:1.arguments
10	compile_commands.json	/^   ".\/.build.log"$/;"	s	array:2.arguments
2	compile_commands.json	/^   "-m64",$/;"	s	array:0.arguments
2	compile_commands.json	/^   "-m64",$/;"	s	array:1.arguments
2	compile_commands.json	/^   "-m64",$/;"	s	array:2.arguments
2	compile_commands.json	/^ {$/;"	o
3	compile_commands.json	/^   "-std=c++98",$/;"	s	array:0.arguments
3	compile_commands.json	/^   "-std=c++98",$/;"	s	array:1.arguments
3	compile_commands.json	/^   "-std=c++98",$/;"	s	array:2.arguments
4	compile_commands.json	/^   "-Wall",$/;"	s	array:0.arguments
4	compile_commands.json	/^   "-Wall",$/;"	s	array:1.arguments
4	compile_commands.json	/^   "-Wall",$/;"	s	array:2.arguments
5	compile_commands.json	/^   "-Wextra",$/;"	s	array:0.arguments
5	compile_commands.json	/^   "-Wextra",$/;"	s	array:1.arguments
5	compile_commands.json	/^   "-Wextra",$/;"	s	array:2.arguments
6	compile_commands.json	/^   "-g3",$/;"	s	array:0.arguments
6	compile_commands.json	/^   "-g3",$/;"	s	array:1.arguments
6	compile_commands.json	/^   "-g3",$/;"	s	array:2.arguments
7	compile_commands.json	/^   "-o",$/;"	s	array:0.arguments
7	compile_commands.json	/^   "-o",$/;"	s	array:1.arguments
7	compile_commands.json	/^   "-o",$/;"	s	array:2.arguments
8	compile_commands.json	/^   ".\/.objs\/exe\/linux\/x86_64\/release\/ConfigParser.cpp.o",$/;"	s	array:0.arguments
8	compile_commands.json	/^   ".\/.objs\/exe\/linux\/x86_64\/release\/VirtServ.cpp.o",$/;"	s	array:1.arguments
8	compile_commands.json	/^   ".\/.objs\/exe\/linux\/x86_64\/release\/main.cpp.o",$/;"	s	array:2.arguments
9	compile_commands.json	/^   "ConfigParser.cpp",$/;"	s	array:0.arguments
9	compile_commands.json	/^   "VirtServ.cpp",$/;"	s	array:1.arguments
9	compile_commands.json	/^   "main.cpp",$/;"	s	array:2.arguments
AFTER	ConfigParser.cpp	/^#define AFTER /;"	d	file:
AR	makefile	/^AR=\/usr\/bin\/ar$/;"	m
AS	makefile	/^AS=\/usr\/bin\/gcc$/;"	m
BEFORE	ConfigParser.cpp	/^#define BEFORE /;"	d	file:
CC	makefile	/^CC=\/usr\/bin\/gcc$/;"	m
CONFIGPARSER_HPP	ConfigParser.hpp	/^#define CONFIGPARSER_HPP$/;"	d
CONFIG_DELIMITER_SET	ConfigParser.hpp	/^# define CONFIG_DELIMITER_SET /;"	d
CU	makefile	/^CU=\/usr\/bin\/clang$/;"	m
CXX	makefile	/^CXX=\/usr\/bin\/gcc$/;"	m
ConfigParser	ConfigParser.cpp	/^\/* Ctor *\/ ConfigParser::ConfigParser(const char* config)$/;"	f	class:ft::ConfigParser
ConfigParser	ConfigParser.hpp	/^class ConfigParser$/;"	c	namespace:ft
DC	makefile	/^DC=\/usr\/bin\/gdc$/;"	m
DCAR	makefile	/^DCAR=\/usr\/bin\/gcc-ar$/;"	m
DEFAULT_CONFIG	ConfigParser.cpp	/^# define DEFAULT_CONFIG /;"	d	file:
LD	makefile	/^LD=\/usr\/bin\/g++$/;"	m
LESS_SOCKADDR_HPP	less_sockaddr.hpp	/^#define LESS_SOCKADDR_HPP$/;"	d
MM	makefile	/^MM=\/usr\/bin\/gcc$/;"	m
MXX	makefile	/^MXX=\/usr\/bin\/gcc$/;"	m
RC	makefile	/^RC=\/home\/cassepipe\/.cargo\/bin\/rustc$/;"	m
RCAR	makefile	/^RCAR=\/home\/cassepipe\/.cargo\/bin\/rustc$/;"	m
RCLD	makefile	/^RCLD=\/home\/cassepipe\/.cargo\/bin\/rustc$/;"	m
RCSH	makefile	/^RCSH=\/home\/cassepipe\/.cargo\/bin\/rustc$/;"	m
SH	makefile	/^SH=\/usr\/bin\/g++$/;"	m
SIZE	ConfigParser.cpp	/^#define SIZE(/;"	d	file:
VIRTSERV_HPP	VirtServ.hpp	/^#define VIRTSERV_HPP$/;"	d
VirtServ	VirtServ.hpp	/^struct VirtServ$/;"	s
VirtServMap	ConfigParser.hpp	/^	typedef std::map<sockaddr_in, VirtServPtrVector >		VirtServMap;$/;"	t	class:ft::ConfigParser	typeref:typename:std::map<sockaddr_in,VirtServPtrVector>
VirtServPtrVector	ConfigParser.hpp	/^	typedef vector<VirtServ*>								VirtServPtrVector;$/;"	t	class:ft::ConfigParser	typeref:typename:vector<VirtServ * >
VirtServVector	ConfigParser.hpp	/^	typedef vector<VirtServ>								VirtServVector;$/;"	t	class:ft::ConfigParser	typeref:typename:vector<VirtServ>
_match	ConfigParser.cpp	/^void ConfigParser::_match(ConfigParser::configstream_iterator& it, const vector<token_dispatch_t/;"	f	class:ft::ConfigParser	typeref:typename:void
_parseIndex	ConfigParser.cpp	/^void ConfigParser::_parseIndex(ConfigParser::configstream_iterator& it)$/;"	f	class:ft::ConfigParser	typeref:typename:void
_parseListen	ConfigParser.cpp	/^void ConfigParser::_parseListen(ConfigParser::configstream_iterator& it)$/;"	f	class:ft::ConfigParser	typeref:typename:void
_parseRoot	ConfigParser.cpp	/^void ConfigParser::_parseRoot(ConfigParser::configstream_iterator& it)$/;"	f	class:ft::ConfigParser	typeref:typename:void
_parseServerBlock	ConfigParser.cpp	/^void ConfigParser::_parseServerBlock(ConfigParser::configstream_iterator& it)$/;"	f	class:ft::ConfigParser	typeref:typename:void
_parseServerName	ConfigParser.cpp	/^void ConfigParser::_parseServerName(ConfigParser::configstream_iterator& it)$/;"	f	class:ft::ConfigParser	typeref:typename:void
advance	ConfigParser.hpp	/^		void advance()$/;"	f	class:ft::ConfigParser::configstream_iterator	typeref:typename:void
all	makefile	/^all:  exe$/;"	t
arguments	compile_commands.json	/^  "arguments": [$/;"	a	object:0
arguments	compile_commands.json	/^  "arguments": [$/;"	a	object:1
arguments	compile_commands.json	/^  "arguments": [$/;"	a	object:2
begin	ConfigParser.hpp	/^	iterator	begin()	{	return m_virtserv_map.begin();	}$/;"	f	class:ft::ConfigParser	typeref:typename:iterator
clean	makefile	/^clean:  clean_exe$/;"	t
clean_exe	makefile	/^clean_exe: $/;"	t
config_parser	README.md	/^# config_parser$/;"	c
configstream_iterator	ConfigParser.hpp	/^		configstream_iterator(std::ifstream& config_stream) : m_ch()$/;"	f	class:ft::ConfigParser::configstream_iterator
configstream_iterator	ConfigParser.hpp	/^	class configstream_iterator$/;"	c	class:ft::ConfigParser
default	makefile	/^default:  exe$/;"	t
directory	compile_commands.json	/^  "directory": "\/mnt\/nfs\/homes\/tpouget\/Desktop\/config_parser",$/;"	s	object:0
directory	compile_commands.json	/^  "directory": "\/mnt\/nfs\/homes\/tpouget\/Desktop\/config_parser",$/;"	s	object:1
directory	compile_commands.json	/^  "directory": "\/mnt\/nfs\/homes\/tpouget\/Desktop\/config_parser",$/;"	s	object:2
end	ConfigParser.hpp	/^	iterator	end()	{	return m_virtserv_map.end();	}$/;"	f	class:ft::ConfigParser	typeref:typename:iterator
exe	makefile	/^exe: .\/linux\/x86_64\/release\/exe$/;"	t
exe_CXXFLAGS	makefile	/^exe_CXXFLAGS=-m64 -std=c++98 -Wall -Wextra -g3$/;"	m
exe_LDFLAGS	makefile	/^exe_LDFLAGS=-m64$/;"	m
file	compile_commands.json	/^  "file": "ConfigParser.cpp"$/;"	s	object:0
file	compile_commands.json	/^  "file": "VirtServ.cpp"$/;"	s	object:1
file	compile_commands.json	/^  "file": "main.cpp"$/;"	s	object:2
ft	ConfigParser.cpp	/^namespace ft$/;"	n	file:
ft	ConfigParser.hpp	/^namespace ft$/;"	n
is_delim	ConfigParser.hpp	/^		bool is_delim() { return m_is_delim; }$/;"	f	class:ft::ConfigParser::configstream_iterator	typeref:typename:bool
isdigit	ConfigParser.cpp	/^		if ( not std::isdigit(*it) )$/;"	m	class:ft::xatoi::std	typeref:typename:not	file:
iterator	ConfigParser.hpp	/^	typedef VirtServMap::iterator							iterator;$/;"	t	class:ft::ConfigParser	typeref:typename:VirtServMap::iterator
less	less_sockaddr.hpp	/^struct less< const sockaddr_in >$/;"	s	namespace:std
less	less_sockaddr.hpp	/^struct less< sockaddr_in >$/;"	s	namespace:std
m_block_dispatch_table	ConfigParser.cpp	/^const ConfigParser::token_dispatch_t ConfigParser::m_block_dispatch_table[] = {$/;"	m	class:ft::ConfigParser	typeref:typename:const ConfigParser::token_dispatch_t[]
m_block_dispatch_table	ConfigParser.hpp	/^	static const token_dispatch_t                m_block_dispatch_table[];$/;"	m	class:ft::ConfigParser	typeref:typename:const token_dispatch_t[]
m_block_dispatch_vec	ConfigParser.cpp	/^const vector< ConfigParser::token_dispatch_t > ConfigParser::m_block_dispatch_vec(m_block_dispat/;"	m	class:ft::ConfigParser	typeref:typename:const vector<ConfigParser::token_dispatch_t>
m_block_dispatch_vec	ConfigParser.hpp	/^	static const std::vector< token_dispatch_t > m_block_dispatch_vec;$/;"	m	class:ft::ConfigParser	typeref:typename:const std::vector<token_dispatch_t>
m_buffer	ConfigParser.hpp	/^		std::string	 			m_buffer;$/;"	m	class:ft::ConfigParser::configstream_iterator	typeref:typename:std::string
m_ch	ConfigParser.hpp	/^		char 		 			m_ch;$/;"	m	class:ft::ConfigParser::configstream_iterator	typeref:typename:char
m_delim_set	ConfigParser.hpp	/^		std::string	 			m_delim_set;$/;"	m	class:ft::ConfigParser::configstream_iterator	typeref:typename:std::string
m_index	VirtServ.hpp	/^	std::vector<std::string> m_index;$/;"	m	struct:VirtServ	typeref:typename:std::vector<std::string>
m_is_delim	ConfigParser.hpp	/^		bool					m_is_delim;$/;"	m	class:ft::ConfigParser::configstream_iterator	typeref:typename:bool
m_root	VirtServ.hpp	/^	std::vector<std::string> m_root;$/;"	m	struct:VirtServ	typeref:typename:std::vector<std::string>
m_server_block_dispatch_table	ConfigParser.cpp	/^const ConfigParser::token_dispatch_t ConfigParser::m_server_block_dispatch_table[] = {$/;"	m	class:ft::ConfigParser	typeref:typename:const ConfigParser::token_dispatch_t[]
m_server_block_dispatch_table	ConfigParser.hpp	/^	static const token_dispatch_t                m_server_block_dispatch_table[];$/;"	m	class:ft::ConfigParser	typeref:typename:const token_dispatch_t[]
m_server_block_dispatch_vec	ConfigParser.cpp	/^const vector< ConfigParser::token_dispatch_t > ConfigParser::m_server_block_dispatch_vec(m_serve/;"	m	class:ft::ConfigParser	typeref:typename:const vector<ConfigParser::token_dispatch_t>
m_server_block_dispatch_vec	ConfigParser.hpp	/^	static const std::vector< token_dispatch_t > m_server_block_dispatch_vec;$/;"	m	class:ft::ConfigParser	typeref:typename:const std::vector<token_dispatch_t>
m_server_name	VirtServ.hpp	/^	std::vector<std::string> m_server_name;$/;"	m	struct:VirtServ	typeref:typename:std::vector<std::string>
m_sockaddr_vec	VirtServ.hpp	/^	std::vector<sockaddr_in> m_sockaddr_vec;$/;"	m	struct:VirtServ	typeref:typename:std::vector<sockaddr_in>
m_stream	ConfigParser.hpp	/^		std::ifstream&			m_stream;$/;"	m	class:ft::ConfigParser::configstream_iterator	typeref:typename:std::ifstream &
m_virtserv_map	ConfigParser.hpp	/^	VirtServMap											m_virtserv_map;$/;"	m	class:ft::ConfigParser	typeref:typename:VirtServMap
m_virtserv_vec	ConfigParser.hpp	/^	std::vector<VirtServ>								m_virtserv_vec;$/;"	m	class:ft::ConfigParser	typeref:typename:std::vector<VirtServ>
main	main.cpp	/^int main(int ac, char **av)$/;"	f	typeref:typename:int
operator ()	less_sockaddr.hpp	/^	bool operator()(const sockaddr_in& s1, const sockaddr_in& s2) const$/;"	f	struct:std::less	typeref:typename:bool
operator *	ConfigParser.hpp	/^		const std::string&		operator*() { return m_buffer; };$/;"	f	class:ft::ConfigParser::configstream_iterator	typeref:typename:const std::string &
operator ++	ConfigParser.hpp	/^		configstream_iterator&	operator++() { advance(); return *this; }$/;"	f	class:ft::ConfigParser::configstream_iterator	typeref:typename:configstream_iterator &
operator ->	ConfigParser.hpp	/^		const std::string*		operator->() { return &m_buffer; };$/;"	f	class:ft::ConfigParser::configstream_iterator	typeref:typename:const std::string *
operator <<	VirtServ.cpp	/^std::ostream& operator<<(std::ostream& os, const VirtServ& servinfo)$/;"	f	typeref:typename:std::ostream &
operator <<	VirtServ.cpp	/^std::ostream& operator<<(std::ostream& os, std::vector<std::string>& vec)$/;"	f	typeref:typename:std::ostream &
operator []	ConfigParser.hpp	/^	const vector<VirtServ*>&	operator[](const VirtServMap::key_type& key) const$/;"	f	class:ft::ConfigParser	typeref:typename:const vector<VirtServ * > &
parse_method	ConfigParser.hpp	/^		void (ConfigParser::*parse_method)(configstream_iterator& it);$/;"	m	struct:ft::ConfigParser::token_dispatch	typeref:typename:void (ConfigParser::*)(configstream_iterator & it)
std	less_sockaddr.hpp	/^namespace std$/;"	n
token	ConfigParser.hpp	/^		std::string token;$/;"	m	struct:ft::ConfigParser::token_dispatch	typeref:typename:std::string
token_dispatch	ConfigParser.hpp	/^	typedef struct token_dispatch$/;"	s	class:ft::ConfigParser
token_dispatch_t	ConfigParser.hpp	/^	} token_dispatch_t;$/;"	t	class:ft::ConfigParser	typeref:struct:ft::ConfigParser::token_dispatch
xatoi	ConfigParser.cpp	/^static int xatoi(const string& str)$/;"	f	namespace:ft	typeref:typename:int	file:
